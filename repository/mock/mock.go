// Code generated by MockGen. DO NOT EDIT.
// Source: ./planner/planner.go
//
// Generated by this command:
//
//	mockgen -destination=repository/mock/mock.go -source ./planner/planner.go Repository
//

// Package mock_planner is a generated GoMock package.
package mock_planner

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	planner "github.com/sp4rd4/wrkpln/planner"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateShift mocks base method.
func (m *MockRepository) CreateShift(ctx context.Context, shift planner.Shift) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateShift", ctx, shift)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateShift indicates an expected call of CreateShift.
func (mr *MockRepositoryMockRecorder) CreateShift(ctx, shift any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateShift", reflect.TypeOf((*MockRepository)(nil).CreateShift), ctx, shift)
}

// CreateWorker mocks base method.
func (m *MockRepository) CreateWorker(ctx context.Context, worker planner.Worker) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorker", ctx, worker)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWorker indicates an expected call of CreateWorker.
func (mr *MockRepositoryMockRecorder) CreateWorker(ctx, worker any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorker", reflect.TypeOf((*MockRepository)(nil).CreateWorker), ctx, worker)
}

// Shifts mocks base method.
func (m *MockRepository) Shifts(ctx context.Context, filter planner.ShiftsFilter) ([]planner.Shift, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shifts", ctx, filter)
	ret0, _ := ret[0].([]planner.Shift)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Shifts indicates an expected call of Shifts.
func (mr *MockRepositoryMockRecorder) Shifts(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shifts", reflect.TypeOf((*MockRepository)(nil).Shifts), ctx, filter)
}

// Transaction mocks base method.
func (m *MockRepository) Transaction(ctx context.Context, action func(planner.Repository) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transaction", ctx, action)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transaction indicates an expected call of Transaction.
func (mr *MockRepositoryMockRecorder) Transaction(ctx, action any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transaction", reflect.TypeOf((*MockRepository)(nil).Transaction), ctx, action)
}

// Worker mocks base method.
func (m *MockRepository) Worker(ctx context.Context, id uuid.UUID) (planner.Worker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Worker", ctx, id)
	ret0, _ := ret[0].(planner.Worker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Worker indicates an expected call of Worker.
func (mr *MockRepositoryMockRecorder) Worker(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Worker", reflect.TypeOf((*MockRepository)(nil).Worker), ctx, id)
}

// Workers mocks base method.
func (m *MockRepository) Workers(ctx context.Context, filter planner.WorkersFilter) ([]planner.Worker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Workers", ctx, filter)
	ret0, _ := ret[0].([]planner.Worker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Workers indicates an expected call of Workers.
func (mr *MockRepositoryMockRecorder) Workers(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Workers", reflect.TypeOf((*MockRepository)(nil).Workers), ctx, filter)
}
